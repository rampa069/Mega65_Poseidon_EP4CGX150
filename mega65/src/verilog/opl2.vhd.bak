library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


-- Parameter definitions
-- Register widths
constant REG_MULT_WIDTH : integer := 4;
constant REG_FNUM_WIDTH : integer := 10;
constant REG_BLOCK_WIDTH : integer := 3;
constant REG_WS_WIDTH : integer := 2;
constant REG_ENV_WIDTH : integer := 4;
constant REG_TL_WIDTH : integer := 6;
constant REG_KSL_WIDTH : integer := 2;
constant REG_FB_WIDTH : integer := 3;
-- Other widths
constant SAMPLE_WIDTH : integer := 16;
constant ENV_WIDTH : integer := 9;
constant OP_OUT_WIDTH : integer := 13;
constant PHASE_ACC_WIDTH : integer := 20;
constant AM_VAL_WIDTH : integer := 5;
constant ENV_RATE_COUNTER_OVERFLOW_WIDTH : integer := 8;
constant CHANNEL_ACCUMULATOR_WIDTH : integer := 19;
constant NUM_OPERATORS_PER_BANK : integer := 18;
constant NUM_CHANNELS_PER_BANK : integer := 9;
constant OP_NUM_WIDTH : integer := 5;

-- Operator types
constant OP_NORMAL : integer := 0;
constant OP_BASS_DRUM : integer := 1;
constant OP_HI_HAT : integer := 2;
constant OP_TOM_TOM : integer := 3;
constant OP_SNARE_DRUM : integer := 4;
constant OP_TOP_CYMBAL : integer := 5;

-- Logarithmic function
function CLOG2(x : integer) return integer is
begin
    case x is
        when 2 => return 1;
        when 3 to 4 => return 2;
        when 5 to 8 => return 3;
        when 9 to 16 => return 4;
        when 17 to 32 => return 5;
        when 33 to 64 => return 6;
        when 65 to 128 => return 7;
        when 129 to 256 => return 8;
        when 257 to 512 => return 9;
        when 513 to 1024 => return 10;
        when 1025 to 2048 => return 11;
        when 2049 to 4196 => return 12;
        when 4197 to 8192 => return 13;
        when 8193 to 16384 => return 14;
        when 16385 to 32768 => return 15;
        when 32769 to 65536 => return 16;
        when 65537 to 131072 => return 17;
        when 131073 to 262144 => return 18;
        when 262145 to 524288 => return 19;
        when 524289 to 1048576 => return 20;
        when 1048577 to 2097152 => return 21;
        when 2097153 to 4194304 => return 22;
        when 4194305 to 8388608 => return 23;
        when 8388609 to 16777216 => return 24;
        when 16777217 to 33554432 => return 25;
        when others => return -1; -- Error case
    end case;
end CLOG2;


entity opl2 is
    generic (
        OPERATOR_PIPELINE_DELAY : integer := 7;  -- 18 operators + idle state
        NUM_OPERATOR_UPDATE_STATES : integer := 19  -- Number of operators per bank + idle state
    );
    port (
        clk : in STD_LOGIC;
        reset : in STD_LOGIC;
        opl2_we : in STD_LOGIC;
        opl2_data : in STD_LOGIC_VECTOR(7 downto 0);
        opl2_adr : in STD_LOGIC_VECTOR(7 downto 0);
        kon : out STD_LOGIC_VECTOR(8 downto 0);
        channel_a : out SIGNED(15 downto 0);
        channel_b : out SIGNED(15 downto 0);
        sample_clk : out STD_LOGIC;
        sample_clk_128 : out STD_LOGIC
    );
end opl2;